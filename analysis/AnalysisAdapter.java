/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGraphGraph(AGraphGraph node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADigraphGraph(ADigraphGraph node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEmptyStmtList(AEmptyStmtList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContinueStmtList(AContinueStmtList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANstmtStmt(ANstmtStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEstmtStmt(AEstmtStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAtstmtStmt(AAtstmtStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAsstmtStmt(AAsstmtStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASstmtStmt(ASstmtStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGraphasAttrStmt(AGraphasAttrStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANodeasAttrStmt(ANodeasAttrStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEdgeasAttrStmt(AEdgeasAttrStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAttrList(AAttrList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACommasepAList(ACommasepAList node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANodeesEdgeStmt(ANodeesEdgeStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubesEdgeStmt(ASubesEdgeStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANodeerEdgerhs(ANodeerEdgerhs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASuberEdgerhs(ASuberEdgerhs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANodeStmt(ANodeStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANodeId(ANodeId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIportPort(AIportPort node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANportPort(ANportPort node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACportPort(ACportPort node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubgSubgraph(ASubgSubgraph node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANsubgSubgraph(ANsubgSubgraph node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADsubgSubgraph(ADsubgSubgraph node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACpnCompassPt(ACpnCompassPt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACpneCompassPt(ACpneCompassPt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACpeCompassPt(ACpeCompassPt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACpseCompassPt(ACpseCompassPt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACpsCompassPt(ACpsCompassPt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACpswCompassPt(ACpswCompassPt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACpwCompassPt(ACpwCompassPt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACpnwCompassPt(ACpnwCompassPt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACpcCompassPt(ACpcCompassPt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACpuCompassPt(ACpuCompassPt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStrict(TStrict node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDigraphk(TDigraphk node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSubgraphk(TSubgraphk node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGraphk(TGraphk node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNodek(TNodek node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEdgek(TEdgek node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftbrace(TLeftbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightbrace(TRightbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftbracket(TLeftbracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightbracket(TRightbracket node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEdgeop(TEdgeop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssignment(TAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTN(TN node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNe(TNe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTE(TE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSe(TSe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTS(TS node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSw(TSw node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTW(TW node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNw(TNw node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTC(TC node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTU(TU node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhitespaces(TWhitespaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
