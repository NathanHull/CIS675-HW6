/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PGraph node1 = (PGraph) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAgraphgraph1Graph */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAgraphgraph2Graph */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAgraphgraph3Graph */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAgraphgraph4Graph */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list, false);
            }
            break;
            case 4: /* reduce AAdigraphgraph1Graph */
            {
                ArrayList<Object> list = new4();
                push(goTo(0), list, false);
            }
            break;
            case 5: /* reduce AAdigraphgraph2Graph */
            {
                ArrayList<Object> list = new5();
                push(goTo(0), list, false);
            }
            break;
            case 6: /* reduce AAdigraphgraph3Graph */
            {
                ArrayList<Object> list = new6();
                push(goTo(0), list, false);
            }
            break;
            case 7: /* reduce AAdigraphgraph4Graph */
            {
                ArrayList<Object> list = new7();
                push(goTo(0), list, false);
            }
            break;
            case 8: /* reduce AEmptyStmtList */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce AAcontinuestmtlist1StmtList */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list, false);
            }
            break;
            case 10: /* reduce AAcontinuestmtlist2StmtList */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list, false);
            }
            break;
            case 11: /* reduce ANstmtStmt */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list, false);
            }
            break;
            case 12: /* reduce AEstmtStmt */
            {
                ArrayList<Object> list = new12();
                push(goTo(2), list, false);
            }
            break;
            case 13: /* reduce AAtstmtStmt */
            {
                ArrayList<Object> list = new13();
                push(goTo(2), list, false);
            }
            break;
            case 14: /* reduce AAsstmtStmt */
            {
                ArrayList<Object> list = new14();
                push(goTo(2), list, false);
            }
            break;
            case 15: /* reduce ASstmtStmt */
            {
                ArrayList<Object> list = new15();
                push(goTo(2), list, false);
            }
            break;
            case 16: /* reduce AGraphasAttrStmt */
            {
                ArrayList<Object> list = new16();
                push(goTo(3), list, false);
            }
            break;
            case 17: /* reduce ANodeasAttrStmt */
            {
                ArrayList<Object> list = new17();
                push(goTo(3), list, false);
            }
            break;
            case 18: /* reduce AEdgeasAttrStmt */
            {
                ArrayList<Object> list = new18();
                push(goTo(3), list, false);
            }
            break;
            case 19: /* reduce AAattrlist1AttrList */
            {
                ArrayList<Object> list = new19();
                push(goTo(4), list, false);
            }
            break;
            case 20: /* reduce AAattrlist2AttrList */
            {
                ArrayList<Object> list = new20();
                push(goTo(4), list, false);
            }
            break;
            case 21: /* reduce AAattrlist3AttrList */
            {
                ArrayList<Object> list = new21();
                push(goTo(4), list, false);
            }
            break;
            case 22: /* reduce AAattrlist4AttrList */
            {
                ArrayList<Object> list = new22();
                push(goTo(4), list, false);
            }
            break;
            case 23: /* reduce AAcommasepalist1AList */
            {
                ArrayList<Object> list = new23();
                push(goTo(5), list, false);
            }
            break;
            case 24: /* reduce AAcommasepalist2AList */
            {
                ArrayList<Object> list = new24();
                push(goTo(5), list, false);
            }
            break;
            case 25: /* reduce AAcommasepalist3AList */
            {
                ArrayList<Object> list = new25();
                push(goTo(5), list, false);
            }
            break;
            case 26: /* reduce AAcommasepalist4AList */
            {
                ArrayList<Object> list = new26();
                push(goTo(5), list, false);
            }
            break;
            case 27: /* reduce AAcommasepalist5AList */
            {
                ArrayList<Object> list = new27();
                push(goTo(5), list, false);
            }
            break;
            case 28: /* reduce AAcommasepalist6AList */
            {
                ArrayList<Object> list = new28();
                push(goTo(5), list, false);
            }
            break;
            case 29: /* reduce AAcommasepalist7AList */
            {
                ArrayList<Object> list = new29();
                push(goTo(5), list, false);
            }
            break;
            case 30: /* reduce AAcommasepalist8AList */
            {
                ArrayList<Object> list = new30();
                push(goTo(5), list, false);
            }
            break;
            case 31: /* reduce AAnodeesedgestmt1EdgeStmt */
            {
                ArrayList<Object> list = new31();
                push(goTo(6), list, false);
            }
            break;
            case 32: /* reduce AAnodeesedgestmt2EdgeStmt */
            {
                ArrayList<Object> list = new32();
                push(goTo(6), list, false);
            }
            break;
            case 33: /* reduce AAsubesedgestmt1EdgeStmt */
            {
                ArrayList<Object> list = new33();
                push(goTo(6), list, false);
            }
            break;
            case 34: /* reduce AAsubesedgestmt2EdgeStmt */
            {
                ArrayList<Object> list = new34();
                push(goTo(6), list, false);
            }
            break;
            case 35: /* reduce AAnodeeredgerhs1Edgerhs */
            {
                ArrayList<Object> list = new35();
                push(goTo(7), list, false);
            }
            break;
            case 36: /* reduce AAnodeeredgerhs2Edgerhs */
            {
                ArrayList<Object> list = new36();
                push(goTo(7), list, false);
            }
            break;
            case 37: /* reduce AAsuberedgerhs1Edgerhs */
            {
                ArrayList<Object> list = new37();
                push(goTo(7), list, false);
            }
            break;
            case 38: /* reduce AAsuberedgerhs2Edgerhs */
            {
                ArrayList<Object> list = new38();
                push(goTo(7), list, false);
            }
            break;
            case 39: /* reduce AAnodestmt1NodeStmt */
            {
                ArrayList<Object> list = new39();
                push(goTo(8), list, false);
            }
            break;
            case 40: /* reduce AAnodestmt2NodeStmt */
            {
                ArrayList<Object> list = new40();
                push(goTo(8), list, false);
            }
            break;
            case 41: /* reduce AAnodeid1NodeId */
            {
                ArrayList<Object> list = new41();
                push(goTo(9), list, false);
            }
            break;
            case 42: /* reduce AAnodeid2NodeId */
            {
                ArrayList<Object> list = new42();
                push(goTo(9), list, false);
            }
            break;
            case 43: /* reduce AIportPort */
            {
                ArrayList<Object> list = new43();
                push(goTo(10), list, false);
            }
            break;
            case 44: /* reduce ANportPort */
            {
                ArrayList<Object> list = new44();
                push(goTo(10), list, false);
            }
            break;
            case 45: /* reduce ACportPort */
            {
                ArrayList<Object> list = new45();
                push(goTo(10), list, false);
            }
            break;
            case 46: /* reduce ASubgSubgraph */
            {
                ArrayList<Object> list = new46();
                push(goTo(11), list, false);
            }
            break;
            case 47: /* reduce ANsubgSubgraph */
            {
                ArrayList<Object> list = new47();
                push(goTo(11), list, false);
            }
            break;
            case 48: /* reduce ADsubgSubgraph */
            {
                ArrayList<Object> list = new48();
                push(goTo(11), list, false);
            }
            break;
            case 49: /* reduce ACpnCompassPt */
            {
                ArrayList<Object> list = new49();
                push(goTo(12), list, false);
            }
            break;
            case 50: /* reduce ACpneCompassPt */
            {
                ArrayList<Object> list = new50();
                push(goTo(12), list, false);
            }
            break;
            case 51: /* reduce ACpeCompassPt */
            {
                ArrayList<Object> list = new51();
                push(goTo(12), list, false);
            }
            break;
            case 52: /* reduce ACpseCompassPt */
            {
                ArrayList<Object> list = new52();
                push(goTo(12), list, false);
            }
            break;
            case 53: /* reduce ACpsCompassPt */
            {
                ArrayList<Object> list = new53();
                push(goTo(12), list, false);
            }
            break;
            case 54: /* reduce ACpswCompassPt */
            {
                ArrayList<Object> list = new54();
                push(goTo(12), list, false);
            }
            break;
            case 55: /* reduce ACpwCompassPt */
            {
                ArrayList<Object> list = new55();
                push(goTo(12), list, false);
            }
            break;
            case 56: /* reduce ACpnwCompassPt */
            {
                ArrayList<Object> list = new56();
                push(goTo(12), list, false);
            }
            break;
            case 57: /* reduce ACpcCompassPt */
            {
                ArrayList<Object> list = new57();
                push(goTo(12), list, false);
            }
            break;
            case 58: /* reduce ACpuCompassPt */
            {
                ArrayList<Object> list = new58();
                push(goTo(12), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAgraphgraph1Graph */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGraph pgraphNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TGraphk tgraphkNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TLeftbrace tleftbraceNode5;
        PStmtList pstmtlistNode6;
        TRightbrace trightbraceNode7;
        tgraphkNode3 = (TGraphk)nodeArrayList1.get(0);
        tleftbraceNode5 = (TLeftbrace)nodeArrayList2.get(0);
        pstmtlistNode6 = (PStmtList)nodeArrayList3.get(0);
        trightbraceNode7 = (TRightbrace)nodeArrayList4.get(0);

        pgraphNode1 = new AGraphGraph(null, tgraphkNode3, null, tleftbraceNode5, pstmtlistNode6, trightbraceNode7);
        }
	nodeList.add(pgraphNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAgraphgraph2Graph */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGraph pgraphNode1;
        {
            // Block
        TStrict tstrictNode2;
        TGraphk tgraphkNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TLeftbrace tleftbraceNode5;
        PStmtList pstmtlistNode6;
        TRightbrace trightbraceNode7;
        tstrictNode2 = (TStrict)nodeArrayList1.get(0);
        tgraphkNode3 = (TGraphk)nodeArrayList2.get(0);
        tleftbraceNode5 = (TLeftbrace)nodeArrayList3.get(0);
        pstmtlistNode6 = (PStmtList)nodeArrayList4.get(0);
        trightbraceNode7 = (TRightbrace)nodeArrayList5.get(0);

        pgraphNode1 = new AGraphGraph(tstrictNode2, tgraphkNode3, null, tleftbraceNode5, pstmtlistNode6, trightbraceNode7);
        }
	nodeList.add(pgraphNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAgraphgraph3Graph */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGraph pgraphNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TGraphk tgraphkNode3;
        TId tidNode4;
        TLeftbrace tleftbraceNode5;
        PStmtList pstmtlistNode6;
        TRightbrace trightbraceNode7;
        tgraphkNode3 = (TGraphk)nodeArrayList1.get(0);
        tidNode4 = (TId)nodeArrayList2.get(0);
        tleftbraceNode5 = (TLeftbrace)nodeArrayList3.get(0);
        pstmtlistNode6 = (PStmtList)nodeArrayList4.get(0);
        trightbraceNode7 = (TRightbrace)nodeArrayList5.get(0);

        pgraphNode1 = new AGraphGraph(null, tgraphkNode3, tidNode4, tleftbraceNode5, pstmtlistNode6, trightbraceNode7);
        }
	nodeList.add(pgraphNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAgraphgraph4Graph */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGraph pgraphNode1;
        {
            // Block
        TStrict tstrictNode2;
        TGraphk tgraphkNode3;
        TId tidNode4;
        TLeftbrace tleftbraceNode5;
        PStmtList pstmtlistNode6;
        TRightbrace trightbraceNode7;
        tstrictNode2 = (TStrict)nodeArrayList1.get(0);
        tgraphkNode3 = (TGraphk)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tleftbraceNode5 = (TLeftbrace)nodeArrayList4.get(0);
        pstmtlistNode6 = (PStmtList)nodeArrayList5.get(0);
        trightbraceNode7 = (TRightbrace)nodeArrayList6.get(0);

        pgraphNode1 = new AGraphGraph(tstrictNode2, tgraphkNode3, tidNode4, tleftbraceNode5, pstmtlistNode6, trightbraceNode7);
        }
	nodeList.add(pgraphNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAdigraphgraph1Graph */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGraph pgraphNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TDigraphk tdigraphkNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TLeftbrace tleftbraceNode5;
        PStmtList pstmtlistNode6;
        TRightbrace trightbraceNode7;
        tdigraphkNode3 = (TDigraphk)nodeArrayList1.get(0);
        tleftbraceNode5 = (TLeftbrace)nodeArrayList2.get(0);
        pstmtlistNode6 = (PStmtList)nodeArrayList3.get(0);
        trightbraceNode7 = (TRightbrace)nodeArrayList4.get(0);

        pgraphNode1 = new ADigraphGraph(null, tdigraphkNode3, null, tleftbraceNode5, pstmtlistNode6, trightbraceNode7);
        }
	nodeList.add(pgraphNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAdigraphgraph2Graph */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGraph pgraphNode1;
        {
            // Block
        TStrict tstrictNode2;
        TDigraphk tdigraphkNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TLeftbrace tleftbraceNode5;
        PStmtList pstmtlistNode6;
        TRightbrace trightbraceNode7;
        tstrictNode2 = (TStrict)nodeArrayList1.get(0);
        tdigraphkNode3 = (TDigraphk)nodeArrayList2.get(0);
        tleftbraceNode5 = (TLeftbrace)nodeArrayList3.get(0);
        pstmtlistNode6 = (PStmtList)nodeArrayList4.get(0);
        trightbraceNode7 = (TRightbrace)nodeArrayList5.get(0);

        pgraphNode1 = new ADigraphGraph(tstrictNode2, tdigraphkNode3, null, tleftbraceNode5, pstmtlistNode6, trightbraceNode7);
        }
	nodeList.add(pgraphNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAdigraphgraph3Graph */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGraph pgraphNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TDigraphk tdigraphkNode3;
        TId tidNode4;
        TLeftbrace tleftbraceNode5;
        PStmtList pstmtlistNode6;
        TRightbrace trightbraceNode7;
        tdigraphkNode3 = (TDigraphk)nodeArrayList1.get(0);
        tidNode4 = (TId)nodeArrayList2.get(0);
        tleftbraceNode5 = (TLeftbrace)nodeArrayList3.get(0);
        pstmtlistNode6 = (PStmtList)nodeArrayList4.get(0);
        trightbraceNode7 = (TRightbrace)nodeArrayList5.get(0);

        pgraphNode1 = new ADigraphGraph(null, tdigraphkNode3, tidNode4, tleftbraceNode5, pstmtlistNode6, trightbraceNode7);
        }
	nodeList.add(pgraphNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAdigraphgraph4Graph */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGraph pgraphNode1;
        {
            // Block
        TStrict tstrictNode2;
        TDigraphk tdigraphkNode3;
        TId tidNode4;
        TLeftbrace tleftbraceNode5;
        PStmtList pstmtlistNode6;
        TRightbrace trightbraceNode7;
        tstrictNode2 = (TStrict)nodeArrayList1.get(0);
        tdigraphkNode3 = (TDigraphk)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tleftbraceNode5 = (TLeftbrace)nodeArrayList4.get(0);
        pstmtlistNode6 = (PStmtList)nodeArrayList5.get(0);
        trightbraceNode7 = (TRightbrace)nodeArrayList6.get(0);

        pgraphNode1 = new ADigraphGraph(tstrictNode2, tdigraphkNode3, tidNode4, tleftbraceNode5, pstmtlistNode6, trightbraceNode7);
        }
	nodeList.add(pgraphNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AEmptyStmtList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PStmtList pstmtlistNode1;
        {
            // Block

        pstmtlistNode1 = new AEmptyStmtList();
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAcontinuestmtlist1StmtList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtList pstmtlistNode1;
        {
            // Block
        PStmt pstmtNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PStmtList pstmtlistNode4;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        pstmtlistNode4 = (PStmtList)nodeArrayList2.get(0);

        pstmtlistNode1 = new AContinueStmtList(pstmtNode2, null, pstmtlistNode4);
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAcontinuestmtlist2StmtList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtList pstmtlistNode1;
        {
            // Block
        PStmt pstmtNode2;
        TSemicolon tsemicolonNode3;
        PStmtList pstmtlistNode4;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        pstmtlistNode4 = (PStmtList)nodeArrayList3.get(0);

        pstmtlistNode1 = new AContinueStmtList(pstmtNode2, tsemicolonNode3, pstmtlistNode4);
        }
	nodeList.add(pstmtlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ANstmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PNodeStmt pnodestmtNode2;
        pnodestmtNode2 = (PNodeStmt)nodeArrayList1.get(0);

        pstmtNode1 = new ANstmtStmt(pnodestmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AEstmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PEdgeStmt pedgestmtNode2;
        pedgestmtNode2 = (PEdgeStmt)nodeArrayList1.get(0);

        pstmtNode1 = new AEstmtStmt(pedgestmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAtstmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PAttrStmt pattrstmtNode2;
        pattrstmtNode2 = (PAttrStmt)nodeArrayList1.get(0);

        pstmtNode1 = new AAtstmtStmt(pattrstmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAsstmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TId tidNode2;
        TAssignment tassignmentNode3;
        TId tidNode4;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        pstmtNode1 = new AAsstmtStmt(tidNode2, tassignmentNode3, tidNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ASstmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PSubgraph psubgraphNode2;
        psubgraphNode2 = (PSubgraph)nodeArrayList1.get(0);

        pstmtNode1 = new ASstmtStmt(psubgraphNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AGraphasAttrStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttrStmt pattrstmtNode1;
        {
            // Block
        TGraphk tgraphkNode2;
        PAttrList pattrlistNode3;
        tgraphkNode2 = (TGraphk)nodeArrayList1.get(0);
        pattrlistNode3 = (PAttrList)nodeArrayList2.get(0);

        pattrstmtNode1 = new AGraphasAttrStmt(tgraphkNode2, pattrlistNode3);
        }
	nodeList.add(pattrstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ANodeasAttrStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttrStmt pattrstmtNode1;
        {
            // Block
        TNodek tnodekNode2;
        PAttrList pattrlistNode3;
        tnodekNode2 = (TNodek)nodeArrayList1.get(0);
        pattrlistNode3 = (PAttrList)nodeArrayList2.get(0);

        pattrstmtNode1 = new ANodeasAttrStmt(tnodekNode2, pattrlistNode3);
        }
	nodeList.add(pattrstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AEdgeasAttrStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttrStmt pattrstmtNode1;
        {
            // Block
        TEdgek tedgekNode2;
        PAttrList pattrlistNode3;
        tedgekNode2 = (TEdgek)nodeArrayList1.get(0);
        pattrlistNode3 = (PAttrList)nodeArrayList2.get(0);

        pattrstmtNode1 = new AEdgeasAttrStmt(tedgekNode2, pattrlistNode3);
        }
	nodeList.add(pattrstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAattrlist1AttrList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttrList pattrlistNode1;
        {
            // Block
        TLeftbracket tleftbracketNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRightbracket trightbracketNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        tleftbracketNode2 = (TLeftbracket)nodeArrayList1.get(0);
        trightbracketNode4 = (TRightbracket)nodeArrayList2.get(0);

        pattrlistNode1 = new AAttrList(tleftbracketNode2, null, trightbracketNode4, null);
        }
	nodeList.add(pattrlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAattrlist2AttrList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttrList pattrlistNode1;
        {
            // Block
        TLeftbracket tleftbracketNode2;
        PAList palistNode3;
        TRightbracket trightbracketNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        tleftbracketNode2 = (TLeftbracket)nodeArrayList1.get(0);
        palistNode3 = (PAList)nodeArrayList2.get(0);
        trightbracketNode4 = (TRightbracket)nodeArrayList3.get(0);

        pattrlistNode1 = new AAttrList(tleftbracketNode2, palistNode3, trightbracketNode4, null);
        }
	nodeList.add(pattrlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAattrlist3AttrList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttrList pattrlistNode1;
        {
            // Block
        TLeftbracket tleftbracketNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRightbracket trightbracketNode4;
        PAttrList pattrlistNode5;
        tleftbracketNode2 = (TLeftbracket)nodeArrayList1.get(0);
        trightbracketNode4 = (TRightbracket)nodeArrayList2.get(0);
        pattrlistNode5 = (PAttrList)nodeArrayList3.get(0);

        pattrlistNode1 = new AAttrList(tleftbracketNode2, null, trightbracketNode4, pattrlistNode5);
        }
	nodeList.add(pattrlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAattrlist4AttrList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAttrList pattrlistNode1;
        {
            // Block
        TLeftbracket tleftbracketNode2;
        PAList palistNode3;
        TRightbracket trightbracketNode4;
        PAttrList pattrlistNode5;
        tleftbracketNode2 = (TLeftbracket)nodeArrayList1.get(0);
        palistNode3 = (PAList)nodeArrayList2.get(0);
        trightbracketNode4 = (TRightbracket)nodeArrayList3.get(0);
        pattrlistNode5 = (PAttrList)nodeArrayList4.get(0);

        pattrlistNode1 = new AAttrList(tleftbracketNode2, palistNode3, trightbracketNode4, pattrlistNode5);
        }
	nodeList.add(pattrlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAcommasepalist1AList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAList palistNode1;
        {
            // Block
        TId tidNode2;
        TAssignment tassignmentNode3;
        TId tidNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        @SuppressWarnings("unused") Object nullNode6 = null;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        palistNode1 = new ACommasepAList(tidNode2, tassignmentNode3, tidNode4, null, null, null);
        }
	nodeList.add(palistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAcommasepalist2AList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAList palistNode1;
        {
            // Block
        TId tidNode2;
        TAssignment tassignmentNode3;
        TId tidNode4;
        TComma tcommaNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);

        palistNode1 = new ACommasepAList(tidNode2, tassignmentNode3, tidNode4, tcommaNode5, null, null);
        }
	nodeList.add(palistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAcommasepalist3AList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAList palistNode1;
        {
            // Block
        TId tidNode2;
        TAssignment tassignmentNode3;
        TId tidNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TSemicolon tsemicolonNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);

        palistNode1 = new ACommasepAList(tidNode2, tassignmentNode3, tidNode4, null, tsemicolonNode6, null);
        }
	nodeList.add(palistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAcommasepalist4AList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAList palistNode1;
        {
            // Block
        TId tidNode2;
        TAssignment tassignmentNode3;
        TId tidNode4;
        TComma tcommaNode5;
        TSemicolon tsemicolonNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);

        palistNode1 = new ACommasepAList(tidNode2, tassignmentNode3, tidNode4, tcommaNode5, tsemicolonNode6, null);
        }
	nodeList.add(palistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAcommasepalist5AList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAList palistNode1;
        {
            // Block
        TId tidNode2;
        TAssignment tassignmentNode3;
        TId tidNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        @SuppressWarnings("unused") Object nullNode6 = null;
        PAList palistNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        palistNode7 = (PAList)nodeArrayList4.get(0);

        palistNode1 = new ACommasepAList(tidNode2, tassignmentNode3, tidNode4, null, null, palistNode7);
        }
	nodeList.add(palistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAcommasepalist6AList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAList palistNode1;
        {
            // Block
        TId tidNode2;
        TAssignment tassignmentNode3;
        TId tidNode4;
        TComma tcommaNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        PAList palistNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        palistNode7 = (PAList)nodeArrayList5.get(0);

        palistNode1 = new ACommasepAList(tidNode2, tassignmentNode3, tidNode4, tcommaNode5, null, palistNode7);
        }
	nodeList.add(palistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAcommasepalist7AList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAList palistNode1;
        {
            // Block
        TId tidNode2;
        TAssignment tassignmentNode3;
        TId tidNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TSemicolon tsemicolonNode6;
        PAList palistNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList4.get(0);
        palistNode7 = (PAList)nodeArrayList5.get(0);

        palistNode1 = new ACommasepAList(tidNode2, tassignmentNode3, tidNode4, null, tsemicolonNode6, palistNode7);
        }
	nodeList.add(palistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAcommasepalist8AList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAList palistNode1;
        {
            // Block
        TId tidNode2;
        TAssignment tassignmentNode3;
        TId tidNode4;
        TComma tcommaNode5;
        TSemicolon tsemicolonNode6;
        PAList palistNode7;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tassignmentNode3 = (TAssignment)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tcommaNode5 = (TComma)nodeArrayList4.get(0);
        tsemicolonNode6 = (TSemicolon)nodeArrayList5.get(0);
        palistNode7 = (PAList)nodeArrayList6.get(0);

        palistNode1 = new ACommasepAList(tidNode2, tassignmentNode3, tidNode4, tcommaNode5, tsemicolonNode6, palistNode7);
        }
	nodeList.add(palistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAnodeesedgestmt1EdgeStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEdgeStmt pedgestmtNode1;
        {
            // Block
        PNodeId pnodeidNode2;
        PEdgerhs pedgerhsNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        pnodeidNode2 = (PNodeId)nodeArrayList1.get(0);
        pedgerhsNode3 = (PEdgerhs)nodeArrayList2.get(0);

        pedgestmtNode1 = new ANodeesEdgeStmt(pnodeidNode2, pedgerhsNode3, null);
        }
	nodeList.add(pedgestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAnodeesedgestmt2EdgeStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEdgeStmt pedgestmtNode1;
        {
            // Block
        PNodeId pnodeidNode2;
        PEdgerhs pedgerhsNode3;
        PAttrList pattrlistNode4;
        pnodeidNode2 = (PNodeId)nodeArrayList1.get(0);
        pedgerhsNode3 = (PEdgerhs)nodeArrayList2.get(0);
        pattrlistNode4 = (PAttrList)nodeArrayList3.get(0);

        pedgestmtNode1 = new ANodeesEdgeStmt(pnodeidNode2, pedgerhsNode3, pattrlistNode4);
        }
	nodeList.add(pedgestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAsubesedgestmt1EdgeStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEdgeStmt pedgestmtNode1;
        {
            // Block
        PSubgraph psubgraphNode2;
        PEdgerhs pedgerhsNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        psubgraphNode2 = (PSubgraph)nodeArrayList1.get(0);
        pedgerhsNode3 = (PEdgerhs)nodeArrayList2.get(0);

        pedgestmtNode1 = new ASubesEdgeStmt(psubgraphNode2, pedgerhsNode3, null);
        }
	nodeList.add(pedgestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAsubesedgestmt2EdgeStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEdgeStmt pedgestmtNode1;
        {
            // Block
        PSubgraph psubgraphNode2;
        PEdgerhs pedgerhsNode3;
        PAttrList pattrlistNode4;
        psubgraphNode2 = (PSubgraph)nodeArrayList1.get(0);
        pedgerhsNode3 = (PEdgerhs)nodeArrayList2.get(0);
        pattrlistNode4 = (PAttrList)nodeArrayList3.get(0);

        pedgestmtNode1 = new ASubesEdgeStmt(psubgraphNode2, pedgerhsNode3, pattrlistNode4);
        }
	nodeList.add(pedgestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAnodeeredgerhs1Edgerhs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEdgerhs pedgerhsNode1;
        {
            // Block
        TEdgeop tedgeopNode2;
        PNodeId pnodeidNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tedgeopNode2 = (TEdgeop)nodeArrayList1.get(0);
        pnodeidNode3 = (PNodeId)nodeArrayList2.get(0);

        pedgerhsNode1 = new ANodeerEdgerhs(tedgeopNode2, pnodeidNode3, null);
        }
	nodeList.add(pedgerhsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAnodeeredgerhs2Edgerhs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEdgerhs pedgerhsNode1;
        {
            // Block
        TEdgeop tedgeopNode2;
        PNodeId pnodeidNode3;
        PEdgerhs pedgerhsNode4;
        tedgeopNode2 = (TEdgeop)nodeArrayList1.get(0);
        pnodeidNode3 = (PNodeId)nodeArrayList2.get(0);
        pedgerhsNode4 = (PEdgerhs)nodeArrayList3.get(0);

        pedgerhsNode1 = new ANodeerEdgerhs(tedgeopNode2, pnodeidNode3, pedgerhsNode4);
        }
	nodeList.add(pedgerhsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAsuberedgerhs1Edgerhs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEdgerhs pedgerhsNode1;
        {
            // Block
        TEdgeop tedgeopNode2;
        PSubgraph psubgraphNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        tedgeopNode2 = (TEdgeop)nodeArrayList1.get(0);
        psubgraphNode3 = (PSubgraph)nodeArrayList2.get(0);

        pedgerhsNode1 = new ASuberEdgerhs(tedgeopNode2, psubgraphNode3, null);
        }
	nodeList.add(pedgerhsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAsuberedgerhs2Edgerhs */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEdgerhs pedgerhsNode1;
        {
            // Block
        TEdgeop tedgeopNode2;
        PSubgraph psubgraphNode3;
        PEdgerhs pedgerhsNode4;
        tedgeopNode2 = (TEdgeop)nodeArrayList1.get(0);
        psubgraphNode3 = (PSubgraph)nodeArrayList2.get(0);
        pedgerhsNode4 = (PEdgerhs)nodeArrayList3.get(0);

        pedgerhsNode1 = new ASuberEdgerhs(tedgeopNode2, psubgraphNode3, pedgerhsNode4);
        }
	nodeList.add(pedgerhsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAnodestmt1NodeStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNodeStmt pnodestmtNode1;
        {
            // Block
        PNodeId pnodeidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pnodeidNode2 = (PNodeId)nodeArrayList1.get(0);

        pnodestmtNode1 = new ANodeStmt(pnodeidNode2, null);
        }
	nodeList.add(pnodestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAnodestmt2NodeStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNodeStmt pnodestmtNode1;
        {
            // Block
        PNodeId pnodeidNode2;
        PAttrList pattrlistNode3;
        pnodeidNode2 = (PNodeId)nodeArrayList1.get(0);
        pattrlistNode3 = (PAttrList)nodeArrayList2.get(0);

        pnodestmtNode1 = new ANodeStmt(pnodeidNode2, pattrlistNode3);
        }
	nodeList.add(pnodestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAnodeid1NodeId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNodeId pnodeidNode1;
        {
            // Block
        TId tidNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pnodeidNode1 = new ANodeId(tidNode2, null);
        }
	nodeList.add(pnodeidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAnodeid2NodeId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNodeId pnodeidNode1;
        {
            // Block
        TId tidNode2;
        PPort pportNode3;
        tidNode2 = (TId)nodeArrayList1.get(0);
        pportNode3 = (PPort)nodeArrayList2.get(0);

        pnodeidNode1 = new ANodeId(tidNode2, pportNode3);
        }
	nodeList.add(pnodeidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AIportPort */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPort pportNode1;
        {
            // Block
        TColon tcolonNode2;
        TId tidNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);

        pportNode1 = new AIportPort(tcolonNode2, tidNode3);
        }
	nodeList.add(pportNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ANportPort */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPort pportNode1;
        {
            // Block
        TColon tcolonNode2;
        TId tidNode3;
        TColon tcolonNode4;
        PCompassPt pcompassptNode5;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        pcompassptNode5 = (PCompassPt)nodeArrayList4.get(0);

        pportNode1 = new ANportPort(tcolonNode2, tidNode3, tcolonNode4, pcompassptNode5);
        }
	nodeList.add(pportNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ACportPort */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPort pportNode1;
        {
            // Block
        TColon tcolonNode2;
        PCompassPt pcompassptNode3;
        tcolonNode2 = (TColon)nodeArrayList1.get(0);
        pcompassptNode3 = (PCompassPt)nodeArrayList2.get(0);

        pportNode1 = new ACportPort(tcolonNode2, pcompassptNode3);
        }
	nodeList.add(pportNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ASubgSubgraph */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSubgraph psubgraphNode1;
        {
            // Block
        TLeftbrace tleftbraceNode2;
        PStmtList pstmtlistNode3;
        TRightbrace trightbraceNode4;
        tleftbraceNode2 = (TLeftbrace)nodeArrayList1.get(0);
        pstmtlistNode3 = (PStmtList)nodeArrayList2.get(0);
        trightbraceNode4 = (TRightbrace)nodeArrayList3.get(0);

        psubgraphNode1 = new ASubgSubgraph(tleftbraceNode2, pstmtlistNode3, trightbraceNode4);
        }
	nodeList.add(psubgraphNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ANsubgSubgraph */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSubgraph psubgraphNode1;
        {
            // Block
        TSubgraphk tsubgraphkNode2;
        TId tidNode3;
        TLeftbrace tleftbraceNode4;
        PStmtList pstmtlistNode5;
        TRightbrace trightbraceNode6;
        tsubgraphkNode2 = (TSubgraphk)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tleftbraceNode4 = (TLeftbrace)nodeArrayList3.get(0);
        pstmtlistNode5 = (PStmtList)nodeArrayList4.get(0);
        trightbraceNode6 = (TRightbrace)nodeArrayList5.get(0);

        psubgraphNode1 = new ANsubgSubgraph(tsubgraphkNode2, tidNode3, tleftbraceNode4, pstmtlistNode5, trightbraceNode6);
        }
	nodeList.add(psubgraphNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ADsubgSubgraph */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSubgraph psubgraphNode1;
        {
            // Block
        TSubgraphk tsubgraphkNode2;
        TLeftbrace tleftbraceNode3;
        PStmtList pstmtlistNode4;
        TRightbrace trightbraceNode5;
        tsubgraphkNode2 = (TSubgraphk)nodeArrayList1.get(0);
        tleftbraceNode3 = (TLeftbrace)nodeArrayList2.get(0);
        pstmtlistNode4 = (PStmtList)nodeArrayList3.get(0);
        trightbraceNode5 = (TRightbrace)nodeArrayList4.get(0);

        psubgraphNode1 = new ADsubgSubgraph(tsubgraphkNode2, tleftbraceNode3, pstmtlistNode4, trightbraceNode5);
        }
	nodeList.add(psubgraphNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ACpnCompassPt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompassPt pcompassptNode1;
        {
            // Block
        TN tnNode2;
        tnNode2 = (TN)nodeArrayList1.get(0);

        pcompassptNode1 = new ACpnCompassPt(tnNode2);
        }
	nodeList.add(pcompassptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ACpneCompassPt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompassPt pcompassptNode1;
        {
            // Block
        TNe tneNode2;
        tneNode2 = (TNe)nodeArrayList1.get(0);

        pcompassptNode1 = new ACpneCompassPt(tneNode2);
        }
	nodeList.add(pcompassptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ACpeCompassPt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompassPt pcompassptNode1;
        {
            // Block
        TE teNode2;
        teNode2 = (TE)nodeArrayList1.get(0);

        pcompassptNode1 = new ACpeCompassPt(teNode2);
        }
	nodeList.add(pcompassptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ACpseCompassPt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompassPt pcompassptNode1;
        {
            // Block
        TSe tseNode2;
        tseNode2 = (TSe)nodeArrayList1.get(0);

        pcompassptNode1 = new ACpseCompassPt(tseNode2);
        }
	nodeList.add(pcompassptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ACpsCompassPt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompassPt pcompassptNode1;
        {
            // Block
        TS tsNode2;
        tsNode2 = (TS)nodeArrayList1.get(0);

        pcompassptNode1 = new ACpsCompassPt(tsNode2);
        }
	nodeList.add(pcompassptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ACpswCompassPt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompassPt pcompassptNode1;
        {
            // Block
        TSw tswNode2;
        tswNode2 = (TSw)nodeArrayList1.get(0);

        pcompassptNode1 = new ACpswCompassPt(tswNode2);
        }
	nodeList.add(pcompassptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ACpwCompassPt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompassPt pcompassptNode1;
        {
            // Block
        TW twNode2;
        twNode2 = (TW)nodeArrayList1.get(0);

        pcompassptNode1 = new ACpwCompassPt(twNode2);
        }
	nodeList.add(pcompassptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ACpnwCompassPt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompassPt pcompassptNode1;
        {
            // Block
        TNw tnwNode2;
        tnwNode2 = (TNw)nodeArrayList1.get(0);

        pcompassptNode1 = new ACpnwCompassPt(tnwNode2);
        }
	nodeList.add(pcompassptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ACpcCompassPt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompassPt pcompassptNode1;
        {
            // Block
        TC tcNode2;
        tcNode2 = (TC)nodeArrayList1.get(0);

        pcompassptNode1 = new ACpcCompassPt(tcNode2);
        }
	nodeList.add(pcompassptNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ACpuCompassPt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompassPt pcompassptNode1;
        {
            // Block
        TU tuNode2;
        tuNode2 = (TU)nodeArrayList1.get(0);

        pcompassptNode1 = new ACpuCompassPt(tuNode2);
        }
	nodeList.add(pcompassptNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {3, SHIFT, 3}, },
			{{-1, ERROR, 1}, {1, SHIFT, 5}, {3, SHIFT, 6}, },
			{{-1, ERROR, 2}, {6, SHIFT, 7}, {25, SHIFT, 8}, },
			{{-1, ERROR, 3}, {6, SHIFT, 9}, {25, SHIFT, 10}, },
			{{-1, ERROR, 4}, {26, ACCEPT, -1}, },
			{{-1, ERROR, 5}, {6, SHIFT, 11}, {25, SHIFT, 12}, },
			{{-1, ERROR, 6}, {6, SHIFT, 13}, {25, SHIFT, 14}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, ERROR, 8}, {6, SHIFT, 28}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, ERROR, 10}, {6, SHIFT, 30}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, ERROR, 12}, {6, SHIFT, 32}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, ERROR, 14}, {6, SHIFT, 34}, },
			{{-1, ERROR, 15}, {6, SHIFT, 35}, {25, SHIFT, 36}, },
			{{-1, ERROR, 16}, {8, SHIFT, 37}, },
			{{-1, ERROR, 17}, {8, SHIFT, 37}, },
			{{-1, ERROR, 18}, {8, SHIFT, 37}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, REDUCE, 41}, {12, SHIFT, 42}, {13, SHIFT, 43}, },
			{{-1, ERROR, 21}, {7, SHIFT, 45}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {11, SHIFT, 46}, {25, SHIFT, 20}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 39}, {8, SHIFT, 37}, {10, SHIFT, 48}, },
			{{-1, REDUCE, 15}, {10, SHIFT, 48}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, ERROR, 29}, {7, SHIFT, 53}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, ERROR, 31}, {7, SHIFT, 55}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, ERROR, 33}, {7, SHIFT, 57}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, ERROR, 36}, {6, SHIFT, 60}, },
			{{-1, ERROR, 37}, {9, SHIFT, 61}, {25, SHIFT, 62}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 41}, {7, SHIFT, 64}, },
			{{-1, ERROR, 42}, {15, SHIFT, 65}, {16, SHIFT, 66}, {17, SHIFT, 67}, {18, SHIFT, 68}, {19, SHIFT, 69}, {20, SHIFT, 70}, {21, SHIFT, 71}, {22, SHIFT, 72}, {23, SHIFT, 73}, {24, SHIFT, 74}, {25, SHIFT, 75}, },
			{{-1, ERROR, 43}, {25, SHIFT, 77}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 48}, {2, SHIFT, 15}, {6, SHIFT, 19}, {25, SHIFT, 79}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 31}, {8, SHIFT, 37}, },
			{{-1, REDUCE, 33}, {8, SHIFT, 37}, },
			{{-1, ERROR, 52}, {7, SHIFT, 84}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 54}, {7, SHIFT, 85}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 56}, {7, SHIFT, 86}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 58}, {7, SHIFT, 87}, },
			{{-1, ERROR, 59}, {7, SHIFT, 88}, },
			{{-1, REDUCE, 8}, {2, SHIFT, 15}, {3, SHIFT, 16}, {4, SHIFT, 17}, {5, SHIFT, 18}, {6, SHIFT, 19}, {25, SHIFT, 20}, },
			{{-1, REDUCE, 19}, {8, SHIFT, 37}, },
			{{-1, ERROR, 62}, {13, SHIFT, 91}, },
			{{-1, ERROR, 63}, {9, SHIFT, 92}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 43}, {12, SHIFT, 93}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 41}, {12, SHIFT, 42}, },
			{{-1, REDUCE, 35}, {10, SHIFT, 48}, },
			{{-1, REDUCE, 37}, {10, SHIFT, 48}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 89}, {7, SHIFT, 96}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 91}, {25, SHIFT, 97}, },
			{{-1, REDUCE, 20}, {8, SHIFT, 37}, },
			{{-1, ERROR, 93}, {15, SHIFT, 65}, {16, SHIFT, 66}, {17, SHIFT, 67}, {18, SHIFT, 68}, {19, SHIFT, 69}, {20, SHIFT, 70}, {21, SHIFT, 71}, {22, SHIFT, 72}, {23, SHIFT, 73}, {24, SHIFT, 74}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 23}, {11, SHIFT, 100}, {14, SHIFT, 101}, {25, SHIFT, 62}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 25}, {25, SHIFT, 62}, },
			{{-1, REDUCE, 24}, {11, SHIFT, 104}, {25, SHIFT, 62}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 26}, {25, SHIFT, 62}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 30}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 21}, {9, 29}, {11, 31}, {13, 33}, {19, 41}, {22, 47}, {28, 52}, {30, 54}, {32, 56}, {34, 58}, {35, 59}, {46, 78}, {60, 89}, },
			{{-1, 22}, },
			{{-1, 23}, },
			{{-1, 38}, {17, 39}, {18, 40}, {26, 49}, {50, 82}, {51, 83}, {61, 90}, {92, 98}, },
			{{-1, 63}, {97, 102}, {100, 103}, {101, 105}, {104, 106}, },
			{{-1, 24}, },
			{{-1, 50}, {27, 51}, {80, 94}, {81, 95}, },
			{{-1, 25}, },
			{{-1, 26}, {48, 80}, },
			{{-1, 44}, },
			{{-1, 27}, {48, 81}, },
			{{-1, 76}, {93, 99}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'strict', 'digraph', 'graph'",
			"expecting: 'digraph', 'graph'",
			"expecting: '{', id",
			"expecting: EOF",
			"expecting: 'subgraph', 'graph', 'node', 'edge', '{', '}', id",
			"expecting: '{'",
			"expecting: '['",
			"expecting: 'subgraph', 'graph', 'node', 'edge', '{', '}', '[', '->', ';', ':', '=', id",
			"expecting: '}'",
			"expecting: 'subgraph', 'graph', 'node', 'edge', '{', '}', ';', id",
			"expecting: 'subgraph', 'graph', 'node', 'edge', '{', '}', '[', '->', ';', id",
			"expecting: 'subgraph', 'graph', 'node', 'edge', '{', '}', '->', ';', id",
			"expecting: ']', id",
			"expecting: 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw', 'c', '_', id",
			"expecting: id",
			"expecting: 'subgraph', '{', id",
			"expecting: 'subgraph', 'graph', 'node', 'edge', '{', '}', '[', ';', id",
			"expecting: '='",
			"expecting: ']'",
			"expecting: 'subgraph', 'graph', 'node', 'edge', '{', '}', '[', '->', ';', ':', id",
			"expecting: 'n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw', 'c', '_'",
			"expecting: ']', ';', ',', id",
			"expecting: ']', ';', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 2, 2, 4, 5, 4, 5, 4, 5, 4, 5, 2, 6, 6, 6, 4, 7, 8, 9, 9, 9, 9, 10, 11, 4, 8, 4, 8, 4, 8, 4, 4, 5, 12, 9, 9, 9, 8, 13, 14, 10, 3, 4, 8, 15, 9, 16, 16, 8, 3, 8, 3, 8, 3, 8, 8, 4, 16, 17, 18, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 19, 10, 9, 8, 19, 10, 10, 9, 9, 3, 3, 3, 3, 10, 8, 9, 14, 16, 20, 16, 16, 10, 21, 9, 10, 12, 22, 18, 18, 12, 18, 18, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
