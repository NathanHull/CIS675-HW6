/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AAsstmtStmt extends PStmt
{
    private TId _l_;
    private TAssignment _assignment_;
    private TId _r_;

    public AAsstmtStmt()
    {
        // Constructor
    }

    public AAsstmtStmt(
        @SuppressWarnings("hiding") TId _l_,
        @SuppressWarnings("hiding") TAssignment _assignment_,
        @SuppressWarnings("hiding") TId _r_)
    {
        // Constructor
        setL(_l_);

        setAssignment(_assignment_);

        setR(_r_);

    }

    @Override
    public Object clone()
    {
        return new AAsstmtStmt(
            cloneNode(this._l_),
            cloneNode(this._assignment_),
            cloneNode(this._r_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAsstmtStmt(this);
    }

    public TId getL()
    {
        return this._l_;
    }

    public void setL(TId node)
    {
        if(this._l_ != null)
        {
            this._l_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l_ = node;
    }

    public TAssignment getAssignment()
    {
        return this._assignment_;
    }

    public void setAssignment(TAssignment node)
    {
        if(this._assignment_ != null)
        {
            this._assignment_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assignment_ = node;
    }

    public TId getR()
    {
        return this._r_;
    }

    public void setR(TId node)
    {
        if(this._r_ != null)
        {
            this._r_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._r_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._l_)
            + toString(this._assignment_)
            + toString(this._r_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._l_ == child)
        {
            this._l_ = null;
            return;
        }

        if(this._assignment_ == child)
        {
            this._assignment_ = null;
            return;
        }

        if(this._r_ == child)
        {
            this._r_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._l_ == oldChild)
        {
            setL((TId) newChild);
            return;
        }

        if(this._assignment_ == oldChild)
        {
            setAssignment((TAssignment) newChild);
            return;
        }

        if(this._r_ == oldChild)
        {
            setR((TId) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
