/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ANportPort extends PPort
{
    private TColon _first_;
    private TId _id_;
    private TColon _second_;
    private PCompassPt _compassPt_;

    public ANportPort()
    {
        // Constructor
    }

    public ANportPort(
        @SuppressWarnings("hiding") TColon _first_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TColon _second_,
        @SuppressWarnings("hiding") PCompassPt _compassPt_)
    {
        // Constructor
        setFirst(_first_);

        setId(_id_);

        setSecond(_second_);

        setCompassPt(_compassPt_);

    }

    @Override
    public Object clone()
    {
        return new ANportPort(
            cloneNode(this._first_),
            cloneNode(this._id_),
            cloneNode(this._second_),
            cloneNode(this._compassPt_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANportPort(this);
    }

    public TColon getFirst()
    {
        return this._first_;
    }

    public void setFirst(TColon node)
    {
        if(this._first_ != null)
        {
            this._first_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._first_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TColon getSecond()
    {
        return this._second_;
    }

    public void setSecond(TColon node)
    {
        if(this._second_ != null)
        {
            this._second_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._second_ = node;
    }

    public PCompassPt getCompassPt()
    {
        return this._compassPt_;
    }

    public void setCompassPt(PCompassPt node)
    {
        if(this._compassPt_ != null)
        {
            this._compassPt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._compassPt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._first_)
            + toString(this._id_)
            + toString(this._second_)
            + toString(this._compassPt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._first_ == child)
        {
            this._first_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._second_ == child)
        {
            this._second_ = null;
            return;
        }

        if(this._compassPt_ == child)
        {
            this._compassPt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._first_ == oldChild)
        {
            setFirst((TColon) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._second_ == oldChild)
        {
            setSecond((TColon) newChild);
            return;
        }

        if(this._compassPt_ == oldChild)
        {
            setCompassPt((PCompassPt) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
